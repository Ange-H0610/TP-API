openapi: 3.0.3
info:
  title: API User Profiles
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: Users
    description: Gestion des profils utilisateurs
paths:
  /users/{id}:
    get:
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              example:
                identifier: "USR001"
                first_name: "Alice"
                last_name: "Rabe"
                birthdate: "2001-05-10"
                email: "alice@example.com"
                address_street: "Rue 12"
                address_city: "Antananarivo"
                address_country: "MG"
                address_postal_code: "101"
                needs_newsletter: true
                language: fr
        404:
          description: utilisateur introuvable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "User not found"
  /users:
    post:
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUserProfile'
            example:
              - first_name: "Bob"
                last_name: "Rakoto"
                birthdate: "1999-01-01"
                email: "bob@example.com"
                address_street: "Lot II"
                address_city: "Tana"
                address_country: "MG"
                address_postal_code: "101"
                needs_newsletter: false
                language: mg
      responses:
        201:
          description: liste des utilisateurs créés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
  /users/{id}/personalInfo:
    put:
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfo'
      responses:
        200:
          description: informations personnelles mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/{id}/address:
    put:
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        200:
          description: adresse mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/{id}/preferences:
    put:
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        200:
          description: préférences mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
components:
  parameters:
    UserId:
      in: path
      name: id
      required: true
      schema:
        type: string
  schemas:
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/CreateUserProfile'
        - type: object
          properties:
            identifier:
              type: string
    CreateUserProfile:
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'
    PersonalInfo:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
          format: email
    Address:
      type: object
      properties:
        address_street:
          type: string
        address_city:
          type: string
        address_country:
          type: string
        address_postal_code:
          type: string
    Preferences:
      type: object
      properties:
        needs_newsletter:
          type: boolean
        language:
          type: string
          enum: [mg, fr, eng]
